(ns kraken.batch.core
  (:require [clojure.string :as str]
            [cascalog.api :refer :all]))

(require '[cascalog.cascading.io :refer [with-log-level]])

(defn read-log-line [s]
  (let [[timestamp object] (str/split s #"\t")]
    (if (and timestamp object)
      (vector (Long/parseLong timestamp)
              (read-string object))
      [nil nil])))

(defn read-log [path]
  (let [source (lfs-textline path)]
    (<- [?timestamp ?id ?object]
        (source ?line)
        (read-log-line ?line :> ?timestamp ?object)
        (get ?object :id :> ?id))))


(defn twitter-event? [id]
  (and (string? id)
       (= "com.twitter"
          (first (str/split id #"\/")))))

(defbufferfn construct-tweet [tuples]
  (let [objects (map (fn [[_ object]]
                       object)
                     (sort-by (fn [[timestamp _]]
                                timestamp)
                              tuples))]
    [(apply merge objects)]))

(defn tweets [source]
  (<- [?id ?tweet]
      (source ?timestamp ?id ?object)
      (twitter-event? ?id)
      (construct-tweet ?timestamp ?object :> ?tweet)))

#_(with-log-level :warn
    (let [source (read-log "/tmp/kraken-batch.txt")]
      (?- (stdout)
          (tweets source))))